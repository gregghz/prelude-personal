(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-default-range (quote ahs-range-display))
 '(ahs-modes
   (quote
    (actionscript-mode apache-mode bat-generic-mode c++-mode c-mode csharp-mode css-mode dos-mode emacs-lisp-mode html-mode ini-generic-mode java-mode javascript-mode js-mode lisp-interaction-mode lua-mode latex-mode makefile-mode makefile-gmake-mode markdown-mode moccur-edit-mode nxml-mode nxhtml-mode outline-mode perl-mode cperl-mode php-mode python-mode rc-generic-mode reg-generic-mode ruby-mode sgml-mode sh-mode squirrel-mode text-mode tcl-mode visual-basic-mode scala-mode)))
 '(avy-all-windows (quote all-frames))
 '(compilation-auto-jump-to-first-error t)
 '(compilation-error-regexp-alist
   (quote
    (ada aix ant bash borland python-tracebacks-and-caml comma cucumber msft edg-1 edg-2 epc ftnchek iar ibm irix java jikes-file maven jikes-line gcc-include ruby-Test::Unit gnu lcc makepp mips-1 mips-2 msft omake oracle perl php rxp sparc-pascal-file sparc-pascal-line sparc-pascal-example sun sun-ada watcom 4bsd gcov-file gcov-header gcov-nomark gcov-called-line gcov-never-called perl--Pod::Checker perl--Test perl--Test2 perl--Test::Harness weblint)))
 '(compilation-skip-threshold 2)
 '(csv-separators (quote ("," "	")))
 '(custom-safe-themes
   (quote
    ("bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" default)))
 '(ensime-ac-case-sensitive t)
 '(ensime-ac-enable-argument-placeholders nil)
 '(ensime-auto-connect (quote never))
 '(ensime-auto-generate-config t)
 '(ensime-company-case-sensitive nil)
 '(ensime-default-java-flags
   (quote
    ("-Xss2m -Xms1024m -Xmx4048m -XX:ReservedCodeCacheSize=512m -XX:MaxMetaspaceSize=1024m")))
 '(ensime-graphical-tooltips t)
 '(ensime-implicit-gutter-icons t)
 '(ensime-sbt-command "/usr/bin/sbt")
 '(ensime-server-logback nil)
 '(ensime-server-version "1.0.0")
 '(ensime-truncate-lines t)
 '(ensime-typecheck-idle-interval 2)
 '(ensime-typecheck-interval 10)
 '(ensime-use-helm t)
 '(global-mark-ring-max 32)
 '(global-prettify-symbols-mode t)
 '(global-visual-line-mode t)
 '(haskell-mode-hook (quote (turn-on-haskell-doc turn-on-haskell-indentation)))
 '(helm-M-x-fuzzy-match t)
 '(helm-M-x-requires-pattern t)
 '(helm-M-x-reverse-history t)
 '(helm-adaptive-mode t nil (helm-adaptive))
 '(helm-ag-base-command "ag --nocolor --nogroup -U")
 '(helm-autoresize-max-height 30)
 '(helm-candidate-number-limit 100)
 '(helm-default-external-file-browser "pcmanfm")
 '(helm-external-programs-associations nil)
 '(helm-input-idle-delay 0.03)
 '(helm-move-to-line-cycle-in-source t)
 '(helm-quick-update t)
 '(highlight-symbol-idle-delay 0.5)
 '(js2-global-externs (quote (lucid goog $ jQuery)))
 '(js2-strict-trailing-comma-warning nil)
 '(kotlin-tab-width 4)
 '(magit-auto-revert-mode nil)
 '(magit-diff-options (quote ("--function-context")))
 '(magit-diff-refine-hunk (quote all))
 '(magit-highlight-indentation (quote ((".*" . tabs))))
 '(magit-item-highlight-face (quote magit-item-highlight))
 '(magit-refs-show-commit-count (quote all))
 '(magit-revert-buffers (quote silent) t)
 '(magit-show-diffstat t)
 '(mark-ring-max 32)
 '(max-lisp-eval-depth 16000)
 '(max-specpdl-size 24335)
 '(minimap-dedicated-window nil)
 '(mo-git-blame-blame-window-width 20)
 '(mo-git-blame-use-magit (quote always))
 '(package-selected-packages
   (quote
    (emmet-mode ensime ggtags etags-select restclient-helm restclient less-css-mode csv-mode zop-to-char zenburn-theme zeal-at-point yasnippet yari yaml-mode yafolding which-key web-mode volatile-highlights utop use-package typescript-mode tuareg swift-mode string-inflection spacemacs-theme smex smartrep smartparens smart-mode-line scss-mode scala-mode sbt-mode ruby-tools rainbow-mode rainbow-delimiters php-mode persp-projectile persp-mode paradox ov operate-on-number multiple-cursors move-text mo-git-blame markdown-mode magit kotlin-mode key-chord json-mode js2-mode inf-ruby imenu-anywhere iedit ido-ubiquitous highlight-symbol helm-projectile helm-descbinds helm-ag haskell-mode guru-mode groovy-mode grizzl gradle-mode gotest god-mode go-projectile gitignore-mode gitconfig-mode git-timemachine gist geiser flycheck-ocaml flx-ido expand-region exec-path-from-shell evil-visualstar erc-image elisp-slime-nav easy-kill dockerfile-mode discover-my-major diff-hl crux company-go company-anaconda comment-dwim-2 browse-kill-ring beacon anzu ag ace-window)))
 '(paradox-automatically-star t)
 '(persp-initial-frame-name "init")
 '(persp-keymap-prefix "")
 '(powerline-default-separator (quote wave))
 '(powerline-height nil)
 '(projectile-completion-system (quote helm))
 '(projectile-enable-caching t)
 '(projectile-file-exists-local-cache-expire 900)
 '(projectile-global-mode t)
 '(projectile-globally-ignored-buffers (quote ("*ensime-update*")))
 '(projectile-globally-ignored-directories
   (quote
    (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" "build" "target" ".ensime_lucene")))
 '(projectile-globally-ignored-files (quote ("TAGS" ".ensime")))
 '(projectile-indexing-method (quote alien))
 '(projectile-mode-line (quote (:eval (format " P[%s]" (projectile-project-name)))))
 '(projectile-project-root-files-bottom-up
   (quote
    (".projectile" ".git-no-do-not-do-this" ".hg" ".fslckout" ".bzr" "_darcs" ".ensime")))
 '(projectile-switch-project-action (quote projectile-find-file))
 '(projectile-tags-backend (quote ggtags))
 '(projectile-tags-command
   "ctags-exuberant --exclude=\"*.min.js\" --exclude=\"*.css\" --languages=-JavaScript -Re -f %s %s")
 '(projectile-tags-file-name "TAGS")
 '(projectile-use-git-grep t)
 '(rainbow-ansi-colors-major-mode-list (quote (sh-mode c-mode c++-mode nxml-mode)))
 '(restclient-same-buffer-response nil)
 '(safe-local-variable-values
   (quote
    ((hamlet/basic-offset . 4)
     (haskell-process-use-ghci . t)
     (haskell-indent-spaces . 4))))
 '(sbt:program-name "sbt -mem 4096")
 '(sbt:scroll-to-bottom-on-output nil)
 '(scala-indent:default-run-on-strategy 1)
 '(sort-fold-case t)
 '(sp-autoescape-string-quote nil)
 '(sp-autoskip-closing-pair t)
 '(sp-cancel-autoskip-on-backward-movement nil)
 '(sp-highlight-wrap-overlay nil)
 '(sp-show-pair-from-inside t)
 '(visual-line-fringe-indicators (quote (left-curly-arrow right-curly-arrow)))
 '(web-mode-block-padding 4)
 '(web-mode-enable-auto-closing t)
 '(web-mode-script-padding 4)
 '(web-mode-style-padding 4)
 '(which-key-idle-delay 0.7)
 '(which-key-mode t)
 '(whitespace-action nil)
 '(whitespace-line-column 80000))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-edit-mode-face ((t (:background "peru" :foreground "White"))))
 '(custom-comment ((t (:background "dim gray"))))
 '(ensime-implicit-highlight ((t nil)))
 '(highlight ((t (:background "#454545" :foreground "#ffffff" :underline t))))
 '(hl-line ((t (:inherit nil :background "#383838" :underline nil))))
 '(magit-blame-culprit ((t (:inherit magit-blame-header :foreground "dark red"))))
 '(magit-diff-add ((t (:inherit diff-added :foreground "forest green"))))
 '(magit-diff-del ((t (:inherit diff-removed :foreground "light coral"))))
 '(magit-diff-file-header ((t (:inherit diff-file-header))))
 '(magit-diff-hunk-header ((t (:inherit diff-hunk-header))))
 '(magit-item-highlight ((t (:inherit secondary-selection :background "#494949"))))
 '(magit-item-mark ((t (:inherit highlight))))
 '(magit-key-mode-args-face ((t (:inherit widget-field))))
 '(magit-log-head-label-default ((t (:background "Grey50" :box 1))))
 '(magit-log-head-label-head ((t (:background "Grey20" :foreground "White" :box 1))))
 '(magit-log-reflog-label-remote ((t (:background "Grey50" :box 1))))
 '(menu ((t (:background "#3F3F3F" :foreground "#DCDCCC"))))
 '(minimap-active-region-background ((t (:background "SlateGray4"))) t)
 '(mouse ((t (:background "white" :distant-foreground "white" :foreground "white"))))
 '(region ((t (:background "#444444" :foreground "#f6f3e8"))))
 '(sbt:error ((t (:inherit error :foreground "firebrick"))))
 '(sbt:info ((t (:inherit success :foreground "forest green"))))
 '(sbt:warning ((t (:inherit warning :foreground "gold"))))
 '(spaceline-unmodified ((t (:background "DarkGoldenRod2" :foreground "#3E3D31" :inherit (quote mode-line)))))
 '(whitespace-line ((t (:background "#3F3F3F")))))
